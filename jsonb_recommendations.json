[
  {
    "type": "index",
    "priority": "high",
    "description": "Add GIN index to accommodations.data",
    "sql": "\n                    CREATE INDEX idx_accommodations_data_gin ON accommodations USING GIN (data);\n                "
  },
  {
    "type": "index",
    "priority": "high",
    "description": "Add GIN index to analytics.event_data",
    "sql": "\n                    CREATE INDEX idx_analytics_event_data_gin ON analytics USING GIN (event_data);\n                "
  },
  {
    "type": "index",
    "priority": "high",
    "description": "Add GIN index to attractions.data",
    "sql": "\n                    CREATE INDEX idx_attractions_data_gin ON attractions USING GIN (data);\n                "
  },
  {
    "type": "index",
    "priority": "medium",
    "description": "Add expression index for regions.name->ar",
    "sql": "\n                        CREATE INDEX idx_regions_name_ar ON regions ((name->'ar'));\n                    "
  },
  {
    "type": "index",
    "priority": "medium",
    "description": "Add expression index for regions.name->en",
    "sql": "\n                        CREATE INDEX idx_regions_name_en ON regions ((name->'en'));\n                    "
  },
  {
    "type": "index",
    "priority": "medium",
    "description": "Add expression index for restaurants.data->name",
    "sql": "\n                        CREATE INDEX idx_restaurants_data_name ON restaurants ((data->'name'));\n                    "
  },
  {
    "type": "index",
    "priority": "medium",
    "description": "Add expression index for restaurants.data->description",
    "sql": "\n                        CREATE INDEX idx_restaurants_data_description ON restaurants ((data->'description'));\n                    "
  },
  {
    "type": "index",
    "priority": "high",
    "description": "Add GIN index to sessions.data",
    "sql": "\n                    CREATE INDEX idx_sessions_data_gin ON sessions USING GIN (data);\n                "
  },
  {
    "type": "query",
    "priority": "high",
    "description": "Use Simple JSON extraction pattern for best performance",
    "details": "Average: 0.11 ms, compared to JSON path query at 0.18 ms",
    "example": "\n                        SELECT \n                            id, \n                            data->'name' as value\n                        FROM \n                            accommodations\n                        WHERE \n                            data IS NOT NULL\n                        LIMIT 10\n                    "
  }
]
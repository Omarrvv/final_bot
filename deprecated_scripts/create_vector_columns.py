#!/usr/bin/env python3
"""
Create Vector Columns Script

This script adds vector columns to the database tables for storing embeddings:
- attractions: Add embedding column for vector search
- accommodations: Add embedding column for vector search
- restaurants: Add embedding column for vector search

Prerequisites:
- PostgreSQL database with pgvector extension enabled
- Tables for attractions, accommodations, and restaurants already exist
"""

import os
import sys
import logging
import argparse
from dotenv import load_dotenv

# Add the project root to the Python path
script_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(script_dir)
sys.path.insert(0, project_root)

# Import project modules
from src.knowledge.database import DatabaseManager
from src.utils.logger import get_logger

# Configure logging
logger = get_logger("vector-columns")

# Vector dimension for the embeddings
# This should match the dimension of the embeddings generated by the model
VECTOR_DIMENSION = 768  # Default for BERT-based models

def check_pgvector_extension(db_manager):
    """
    Check if pgvector extension is enabled in the database.
    
    Args:
        db_manager (DatabaseManager): Database manager instance
        
    Returns:
        bool: True if enabled, False otherwise
    """
    query = "SELECT extname FROM pg_extension WHERE extname = 'vector'"
    result = db_manager.execute_postgres_query(query)
    
    if not result:
        logger.error("pgvector extension is not enabled. Please run enable_postgres_extensions.py first.")
        return False
    
    logger.info("pgvector extension is enabled")
    return True

def check_table_exists(db_manager, table_name):
    """
    Check if a table exists in the database.
    
    Args:
        db_manager (DatabaseManager): Database manager instance
        table_name (str): Name of the table to check
        
    Returns:
        bool: True if the table exists, False otherwise
    """
    query = f"""
    SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = '{table_name}'
    )
    """
    result = db_manager.execute_postgres_query(query)
    
    if not result or not result[0][0]:
        logger.error(f"Table {table_name} does not exist")
        return False
    
    logger.info(f"Table {table_name} exists")
    return True

def check_column_exists(db_manager, table_name, column_name):
    """
    Check if a column exists in a table.
    
    Args:
        db_manager (DatabaseManager): Database manager instance
        table_name (str): Name of the table
        column_name (str): Name of the column
        
    Returns:
        bool: True if the column exists, False otherwise
    """
    query = f"""
    SELECT EXISTS (
        SELECT FROM information_schema.columns 
        WHERE table_name = '{table_name}' AND column_name = '{column_name}'
    )
    """
    result = db_manager.execute_postgres_query(query)
    
    return result and result[0][0]

def add_vector_column(db_manager, table_name, column_name, dimension):
    """
    Add a vector column to a table.
    
    Args:
        db_manager (DatabaseManager): Database manager instance
        table_name (str): Name of the table
        column_name (str): Name of the column to add
        dimension (int): Dimension of the vector
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Check if column already exists
        if check_column_exists(db_manager, table_name, column_name):
            logger.info(f"Column {column_name} already exists in table {table_name}")
            return True
        
        # Add vector column
        logger.info(f"Adding vector column {column_name} to table {table_name}")
        query = f"ALTER TABLE {table_name} ADD COLUMN {column_name} vector({dimension})"
        db_manager.execute_postgres_query(query, is_write=True)
        
        # Verify column was added
        if check_column_exists(db_manager, table_name, column_name):
            logger.info(f"Successfully added vector column {column_name} to table {table_name}")
            return True
        else:
            logger.error(f"Failed to add vector column {column_name} to table {table_name}")
            return False
    except Exception as e:
        logger.error(f"Error adding vector column to {table_name}: {str(e)}")
        return False

def create_vector_index(db_manager, table_name, column_name, index_method="hnsw"):
    """
    Create an index on a vector column for efficient similarity search.
    
    Args:
        db_manager (DatabaseManager): Database manager instance
        table_name (str): Name of the table
        column_name (str): Name of the vector column
        index_method (str): Index method to use (ivfflat, hnsw)
        
    Returns:
        bool: True if successful, False otherwise
    """
    try:
        # Check if column exists
        if not check_column_exists(db_manager, table_name, column_name):
            logger.error(f"Column {column_name} does not exist in table {table_name}")
            return False
        
        # Create index name
        index_name = f"idx_{table_name}_{column_name}"
        
        # Check if index already exists
        query = f"""
        SELECT EXISTS (
            SELECT FROM pg_indexes 
            WHERE indexname = '{index_name}'
        )
        """
        result = db_manager.execute_postgres_query(query)
        
        if result and result[0][0]:
            logger.info(f"Index {index_name} already exists")
            return True
        
        # Create index based on method
        logger.info(f"Creating {index_method} index on {table_name}.{column_name}")
        
        if index_method == "hnsw":
            # HNSW index (Hierarchical Navigable Small World) - faster for search but slower to build
            query = f"""
            CREATE INDEX {index_name} ON {table_name} 
            USING hnsw ({column_name} vector_l2_ops)
            WITH (m = 16, ef_construction = 64)
            """
        else:
            # IVFFlat index - faster to build but slightly slower for search
            query = f"""
            CREATE INDEX {index_name} ON {table_name} 
            USING ivfflat ({column_name} vector_l2_ops)
            WITH (lists = 100)
            """
        
        db_manager.execute_postgres_query(query, is_write=True)
        
        # Verify index was created
        query = f"""
        SELECT EXISTS (
            SELECT FROM pg_indexes 
            WHERE indexname = '{index_name}'
        )
        """
        result = db_manager.execute_postgres_query(query)
        
        if result and result[0][0]:
            logger.info(f"Successfully created index {index_name}")
            return True
        else:
            logger.error(f"Failed to create index {index_name}")
            return False
    except Exception as e:
        logger.error(f"Error creating vector index on {table_name}.{column_name}: {str(e)}")
        return False

def main():
    """Main function for adding vector columns to tables."""
    parser = argparse.ArgumentParser(description="Add vector columns to database tables")
    parser.add_argument("--dimension", type=int, default=VECTOR_DIMENSION,
                      help=f"Dimension of the vector (default: {VECTOR_DIMENSION})")
    parser.add_argument("--index-method", type=str, choices=["hnsw", "ivfflat"],
                      default="hnsw", help="Vector index method to use")
    parser.add_argument("--tables", type=str, nargs="+", 
                      choices=["attractions", "accommodations", "restaurants", "all"],
                      default=["all"], help="Tables to modify")
    parser.add_argument("--column-name", type=str, default="embedding",
                      help="Name of the vector column to add")
    parser.add_argument("--verbose", action="store_true", help="Enable verbose logging")
    args = parser.parse_args()
    
    # Set logging level
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    
    # Load environment variables
    load_dotenv()
    
    # Ensure Postgres is enabled
    if os.environ.get("USE_POSTGRES", "").lower() != "true":
        logger.error("Postgres is not enabled. Please set USE_POSTGRES=true in your .env file.")
        sys.exit(1)
    
    # Initialize database manager
    db_manager = DatabaseManager()
    
    # Check if we're using PostgreSQL
    if db_manager.db_type != "POSTGRES":
        logger.error("Not connected to a PostgreSQL database")
        sys.exit(1)
    
    # Check if pgvector extension is enabled
    if not check_pgvector_extension(db_manager):
        sys.exit(1)
    
    # Determine which tables to modify
    table_list = ["attractions", "accommodations", "restaurants"]
    if "all" not in args.tables:
        table_list = args.tables
    
    # Process each table
    success = True
    
    for table_name in table_list:
        # Check if table exists
        if not check_table_exists(db_manager, table_name):
            logger.error(f"Table {table_name} does not exist. Skipping.")
            success = False
            continue
        
        # Add vector column
        if not add_vector_column(db_manager, table_name, args.column_name, args.dimension):
            logger.error(f"Failed to add vector column to table {table_name}")
            success = False
            continue
        
        # Create vector index
        if not create_vector_index(db_manager, table_name, args.column_name, args.index_method):
            logger.error(f"Failed to create vector index on table {table_name}")
            success = False
    
    if success:
        logger.info("All vector columns and indexes created successfully")
    else:
        logger.warning("Some operations failed. See log for details.")
        sys.exit(1)

if __name__ == "__main__":
    main() 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: egypt-tourism-chatbot
  labels:
    app: egypt-tourism-chatbot
spec:
  replicas: 3
  selector:
    matchLabels:
      app: egypt-tourism-chatbot
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: egypt-tourism-chatbot
    spec:
      containers:
        - name: chatbot
          image: ${DOCKER_REGISTRY}/egypt-tourism-chatbot:${IMAGE_TAG:-latest}
          imagePullPolicy: Always
          ports:
            - containerPort: 5050
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
          env:
            - name: API_PORT
              value: "5050"
            - name: DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: chatbot-secrets
                  key: database-uri
                  optional: true
            - name: VECTOR_DB_URI
              valueFrom:
                secretKeyRef:
                  name: chatbot-secrets
                  key: vector-db-uri
                  optional: true
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: chatbot-secrets
                  key: openai-api-key
                  optional: true
            - name: OPENAI_MODEL
              value: "gpt-3.5-turbo"
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: chatbot-secrets
                  key: secret-key
            - name: SESSION_STORAGE_URI
              value: "redis://redis:6379/0"
            - name: RATE_LIMIT_STORAGE
              value: "redis://redis:6379/1"
          volumeMounts:
            - name: data-volume
              mountPath: /app/data
          readinessProbe:
            httpGet:
              path: /api/health
              port: 5050
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /api/health
              port: 5050
            initialDelaySeconds: 30
            periodSeconds: 15
      volumes:
        - name: data-volume
          persistentVolumeClaim:
            claimName: chatbot-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: egypt-tourism-chatbot
spec:
  selector:
    app: egypt-tourism-chatbot
  ports:
    - port: 80
      targetPort: 5050
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: chatbot-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    app: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:alpine
          ports:
            - containerPort: 6379
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "200m"
              memory: "256Mi"
          volumeMounts:
            - name: redis-data
              mountPath: /data
          command: ["redis-server", "--appendonly", "yes"]
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: chatbot-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
        - chatbot.example.com
      secretName: chatbot-tls
  rules:
    - host: chatbot.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: egypt-tourism-chatbot
                port:
                  number: 80

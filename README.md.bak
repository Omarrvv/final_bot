# Egypt Tourism Chatbot

## Architecture Migration Notice

This application has been migrated from a Flask-based architecture to FastAPI.
The new application structure is contained in the `src/` directory with `src/main.py` as the entry point.

To start the application, use:
```bash
python -m uvicorn src.main:app --host 0.0.0.0 --port 5050
```

Or use the provided `start_chatbot.sh` script.

A modern conversational AI chatbot for Egyptian tourism information, built with **FastAPI** (backend) and React (frontend).

## Project Structure

- **Backend**: FastAPI application (`src/`) using dependency injection, with NLU, dialog management, and knowledge base components.
- **Frontend**: React application (`react-frontend/`) with a modern chat interface, served by the FastAPI backend.

## Setup and Installation

### Prerequisites

- Conda (for environment management)
- Python 3.12+ (as defined in `environment.yml`)
- Node.js 14+ and npm (for building the frontend)
- SQLite CLI (optional, for inspecting the database: `sudo apt-get install sqlite3` or `brew install sqlite`)

### Backend & Frontend Setup

1.  **Clone the repository:**

    ```bash
    git clone <repository-url>
    cd egypt-chatbot-wind-cursor
    ```

2.  **Create Conda Environment:**

    ```bash
    conda env create -f environment.yml
    conda activate egypt-tourism
    ```

    _(This installs both Python and Node.js versions specified in the file)_

3.  **Install Python Dependencies:** (If not fully handled by `environment.yml` or if changed)

    ```bash
    pip install -r requirements.txt
    ```

4.  **Set up Environment Variables:**
    Create a `.env` file in the project root by copying `.env.example`:

    ```bash
    cp .env.example .env
    ```

    Edit the `.env` file and fill in necessary values:

    ```dotenv
    # General
    LOG_LEVEL=INFO
    # Set TESTING=true for test environment specific settings (like file sessions)
    TESTING=false

    # Database & KB
    DATABASE_URI="sqlite:///./data/egypt_chatbot.db" # Main SQLite DB
    VECTOR_DB_URI="./data/vector_db"              # Local vector storage path
    CONTENT_PATH="./data"                         # Path to JSON data sources

    # Session Storage (Choose ONE)
    # For Redis (Recommended - requires Redis server running, e.g., via docker-compose up -d redis)
    SESSION_STORAGE_URI="redis://localhost:6379/0"
    # For File Storage (Simpler, non-persistent across restarts if in temp dir)
    # SESSION_STORAGE_URI="file://./data/sessions"

    # Services & APIs
    ANTHROPIC_API_KEY="your-anthropic-api-key" # Required for LLM features
    # WEATHER_API_KEY="your-weather-api-key"       # Optional: For weather service
    # TRANSLATION_API_KEY="your-translation-key" # Optional: For translation service

    # Security (Required for user auth features)
    JWT_SECRET="your-strong-secret-key-for-jwt" # IMPORTANT: Change this!

    # Config Paths (Defaults usually okay)
    # MODELS_CONFIG="./configs/models.json"
    # FLOWS_CONFIG="./configs/dialog_flows.json"
    # SERVICES_CONFIG="./configs/services.json"
    # TEMPLATES_PATH="./configs/response_templates"
    ```

5.  **Initialize Database Schema:**

    ```bash
    python init_db.py
    ```

6.  **Populate Knowledge Base:** (Run this after `init_db.py`)

    ```bash
    python scripts/populate_kb.py
    ```

7.  **Build the Frontend:**
    ```bash
    cd react-frontend
    npm install       # Installs React dependencies
    npm run build     # Creates the production build in react-frontend/build/
    cd ..             # Return to project root
    ```

## Running the Application

From the project root directory, ensure your `egypt-tourism` conda environment is active.

Use the start script:

```bash
./start_chatbot.sh
```

This script will:

- Activate the correct conda environment.
- Start the FastAPI backend server using Uvicorn on **http://localhost:5050** (with auto-reload for development).
- The FastAPI server now serves the built React frontend from the root URL (`/`).

Access the application by opening **http://localhost:5050** in your web browser.

Access the automatic API documentation (Swagger UI) at **http://localhost:5050/docs**.

To stop the backend, find its PID (printed by the script) and use `kill <PID>`.

## API Endpoints

The main API endpoints served by the FastAPI backend include:

- **`POST /api/chat`**: Send a message to the chatbot.
- **`POST /api/reset`**: Create or reset a chat session.
- **`GET /api/suggestions`**: Get suggested messages based on context.
- **`GET /api/languages`**: Get supported languages.
- **`POST /api/feedback`**: Submit feedback for a message.
- **`GET /api/health`**: Health check endpoint.
- **`GET /docs`**: Interactive API documentation (Swagger UI).
- **`GET /redoc`**: Alternative API documentation (ReDoc).
- **`/stats/*`**: Analytics endpoints (require authentication, e.g., `/stats/overview`).

## Testing

The project includes comprehensive test suites using `pytest`.

### Running Tests

Ensure the `egypt-tourism` conda environment is active.

To run all tests:

```bash
pytest
```

To run with verbose output:

```bash
pytest -v
```

To run with coverage report (requires `pytest-cov`):

```bash
pytest --cov=src tests/
```

_(Note: Some tests, particularly analytics tests, may be skipped if they require Flask-specific features or complex auth mocking not yet implemented.)_

## Deployment

### Production Deployment

For production, you generally want to run Uvicorn without `--reload` and potentially behind a reverse proxy like Nginx.

1.  **Ensure Production `.env`**: Set `TESTING=false` and use production keys/URIs.
2.  **Build Frontend**: Ensure `react-frontend/build` exists (`npm run build`).
3.  **Run Uvicorn**: Use a production-ready command. `gunicorn` can also be used as a process manager for Uvicorn workers.

    ```bash
    # Example using Uvicorn directly with multiple workers
    uvicorn src.main:app --host 0.0.0.0 --port 5050 --workers 4

    # Example using Gunicorn to manage Uvicorn workers
    # pip install gunicorn
    # gunicorn -w 4 -k uvicorn.workers.UvicornWorker src.main:app --bind 0.0.0.0:5050
    ```

4.  **Nginx/SSL**: Configure Nginx (or another reverse proxy) and obtain SSL certificates as needed (similar steps to the original Flask instructions, but proxying to port 5050).

### Docker Deployment

1.  **Update/Create Dockerfile**:

    ```dockerfile
    # Stage 1: Build React frontend
    FROM node:18 as build-frontend
    WORKDIR /app/frontend
    COPY react-frontend/package*.json ./
    RUN npm install
    COPY react-frontend/ ./
    # Ensure build uses production API URL if needed (can be set via env var)
    RUN npm run build

    # Stage 2: Setup Python backend
    FROM python:3.12-slim
    WORKDIR /app

    # Install dependencies
    COPY requirements.txt .
    # Consider using --no-cache-dir for smaller image size
    RUN pip install -r requirements.txt

    # Copy application code
    COPY . .

    # Copy built frontend from the build stage
    COPY --from=build-frontend /app/frontend/build /app/react-frontend/build

    # Set environment variables (can also be passed during `docker run`)
    ENV PORT=5050
    # Set other ENV vars like DATABASE_URI, SESSION_STORAGE_URI, JWT_SECRET, ANTHROPIC_API_KEY etc.
    # Ensure TESTING is false for production builds
    ENV TESTING=false

    EXPOSE 5050

    # Command to run the application using Uvicorn
    CMD ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "5050", "--workers", "4"]
    ```

2.  **Build and Run Docker Container**:
    ```bash
    docker build -t egypt-chatbot-fastapi .
    # Pass essential secrets as environment variables
    docker run -p 5050:5050 \
      -e JWT_SECRET='your_production_jwt_secret' \
      -e ANTHROPIC_API_KEY='your_production_anthropic_key' \
      -e SESSION_STORAGE_URI='redis://your_redis_host:6379/0' \
      --name egypt-chatbot egypt-chatbot-fastapi
    ```

### Cloud Deployment

FastAPI applications deploy well to various cloud platforms:

- **Heroku**: Requires a `Procfile` like: `web: uvicorn src.main:app --host 0.0.0.0 --port $PORT`. Use Config Vars for secrets.
- **AWS/GCP/Azure**: Container-based deployments (ECS, Cloud Run, App Service) using the Docker image are common.

## Monitoring and Logging

- **Log Files**: Located in the `logs/` directory with daily rotation (by default).
- **Performance**: Includes middleware for basic response time logging (`X-Response-Time` header).
- **API Docs**: Use `/docs` for monitoring available endpoints.

## Contributing

(Add contribution guidelines if applicable)

## License

(Add license information if applicable)

# Authentication and Middleware

The application includes several middleware components for authentication, session management, and request logging.

## Authentication Middleware

The authentication middleware is responsible for validating user sessions and attaching user information to requests. It supports both cookie-based and token-based authentication.

### Features:

- Session token validation from cookies or Authorization header
- Public paths that don't require authentication
- User data attachment to request context
- Redis-based session management

### Usage:

```python
from src.middleware.auth import add_auth_middleware
from src.services.session import SessionService

# Setup session service
session_service = SessionService(redis_client)

# Add middleware to FastAPI app
add_auth_middleware(app, session_service)
```

## Request Logging Middleware

The request logging middleware logs information about incoming requests and their responses, including processing time and status codes.

### Features:

- Request method and path logging
- Client IP and user agent logging
- Request processing time measurement
- Response status code logging
- Optional request and response body logging

### Usage:

```python
from src.middleware.request_logger import add_request_logging_middleware

# Add middleware to FastAPI app
add_request_logging_middleware(app, log_request_body=False, log_response_body=False)
```

## Session Management

The application uses Redis for session management, providing secure and scalable session storage.

### Features:

- Token-based sessions stored in Redis
- Configurable session expiration
- Secure cookie settings
- Session invalidation (logout)

## Configuration

Configure middleware and session management using environment variables:

```bash
# Session management
SESSION_TTL_SECONDS=86400    # Session expiration in seconds
COOKIE_SECURE=false          # Set to "true" in production

# Redis connection
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=              # Leave empty if no password

# Logging
LOG_LEVEL=INFO
```

# Architecture Transition Note

**Important:** This project is transitioning from a dual architecture (Flask-based `app.py` and FastAPI-based `src/main.py`) to a consolidated FastAPI architecture using `src/main.py` exclusively. The transition plan is documented in `docs/architecture_transition.md`.

The main entry point for the application is now `src/main.py`, which is a FastAPI application. The root-level `main.py` file has been updated to import and run the application from `src/main.py` instead of `src/app.py`.

### Key Changes:

- Middleware configuration has been aligned between both files
- Authentication middleware has been added to `src/main.py`
- All routers have been consolidated in `src/main.py`
- Deployment configurations have been updated to use `src/main.py`

In a future update, `src/app.py` will be removed entirely once testing confirms full stability.

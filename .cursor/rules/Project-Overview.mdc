---
description: 
globs: 
alwaysApply: true
---
# Egypt Tourism Chatbot - Project Overview

## Project Purpose

The Egypt Tourism Chatbot is designed to provide travelers with comprehensive information about tourism in Egypt, including attractions, accommodations, transportation, and cultural information. The chatbot serves as a virtual guide capable of answering questions in both English and Arabic, helping users plan their trips, learn about tourist sites, understand local customs, and navigate practical aspects of visiting Egypt.

## Technical Summary

The project currently exists in a transitional state with two parallel architectures:

1. **Active (Legacy) Architecture**: A monolithic Flask application with hardcoded knowledge, currently in production
2. **Target (Modular) Architecture**: A sophisticated FastAPI-based system with advanced NLU, dialog management, and RAG capabilities that remains inactive

The primary technical challenge is consolidating these architectures by resolving the disconnection between the Knowledge Base component and the SQLite database, which prevents access to rich structured tourism data.

## Key Features

- Multilingual support (English/Arabic)
- Information about Egyptian attractions, cities, accommodations, and transportation
- Cultural and practical guidance for tourists
- Interactive conversational interface
- Detailed information on historical sites and landmarks

## Current Status

The project is functional but operating on the simpler legacy architecture, which limits its capabilities. The more advanced architecture has been designed and partially implemented but remains inactive due to:

1. Disconnected Knowledge Base component
2. Architectural dichotomy between legacy and target systems
3. Security vulnerabilities in the current implementation
4. Failing test suite

## Technology Stack

- **Backend**: Python (Flask/FastAPI)
- **Frontend**: React with Tailwind CSS
- **Database**: SQLite (current), PostgreSQL (planned)
- **NLP/ML**: spaCy, Transformers, PyTorch
- **External APIs**: Anthropic Claude, Weather, Translation
- **Infrastructure**: Docker, Kubernetes, GitHub Actions

## Documentation Structure

This documentation set provides a comprehensive overview of the project's architecture, components, and plans for improvement. It is organized into the following sections:

1. **Architecture Overview**: Current and target system architecture
2. **Knowledge Base Structure**: Organization of tourism data
3. **Critical Issues**: Prioritized system deficiencies
4. **Component Specifications**: Details of each system component
5. **Multilingual Requirements**: Language support specifications
6. **RAG Pipeline Design**: Retrieval-Augmented Generation approach
7. **Database Transition**: Plan for SQLite to PostgreSQL migration
8. **Feature Flag System**: Controlled transition between architectures
9. **Technical Debt Registry**: Documented system improvement needs
10. **Deployment Strategy**: Infrastructure and release management
11. **API Contracts**: Interface specifications
12. **Testing Framework**: Test organization and approach
---
description: 
globs: 
alwaysApply: true
---
# Testing Framework

## Test Structure

The Egypt Tourism Chatbot has a defined but currently failing test structure:

```
tests/
├── unit/
│   ├── test_nlu.py
│   ├── test_knowledge_base.py
│   ├── test_dialog_manager.py
│   └── ...
├── integration/
│   ├── test_api.py
│   ├── test_authentication.py
│   └── ...
├── e2e/
│   ├── test_chat_flow.py
│   └── ...
└── conftest.py
```

## Test Types

### Unit Tests

- **Purpose**: Test individual components in isolation
- **Framework**: pytest
- **Coverage Target**: 90% code coverage
- **Key Areas**:
  - NLU Engine
  - Knowledge Base
  - Dialog Manager
  - Response Generator
  - Service Hub

### Integration Tests

- **Purpose**: Test component interactions
- **Framework**: pytest
- **Coverage Target**: Key integration points
- **Key Areas**:
  - API endpoints
  - Database interactions
  - External service integrations
  - Authentication flow

### End-to-End Tests

- **Purpose**: Test complete user journeys
- **Framework**: pytest with requests or Selenium
- **Coverage Target**: Critical user flows
- **Key Scenarios**:
  - Complete chat conversations
  - Authentication and session management
  - Error handling and recovery

### Frontend Tests

- **Purpose**: Test React components and UI
- **Framework**: Jest, React Testing Library
- **Coverage Target**: 80% code coverage
- **Key Areas**:
  - UI components
  - State management
  - API integration
  - Responsive design

## Test Fixtures

- Database fixtures with test data
- Mock external services
- Authentication tokens
- Session data

## Mocking Strategy

- Mock external APIs (Anthropic, weather, etc.)
- Mock database for unit tests
- Mock file system operations
- Mock redis for session tests

## Test Environment

- Isolated test database
- Test-specific configuration
- Docker containers for dependencies
- CI/CD integration

## Testing Challenges

1. **Failing Tests**: Current test suite is broken
2. **Incomplete Coverage**: Many components lack tests
3. **External Dependencies**: Need proper mocking
4. **Complex Stateful Tests**: Dialogue flow testing is complex

## CI Integration

- GitHub Actions workflow for automated testing
- Test runs on pull requests and merges
- Code coverage reporting
- Test result visualization

## Test Data Management

- Fixture files for JSON test data
- Generate synthetic test data
- Reset database between test runs
- Isolation between test cases

## Quality Gates

- All tests must pass before merge
- Minimum code coverage requirements
- Performance test thresholds
- Security scan results
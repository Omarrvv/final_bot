---
description: 
globs: 
alwaysApply: true
---
# Component Specifications

## NLU Engine

**Location**: `src/nlu/engine.py`

**Purpose**: Process and understand user queries for intent recognition and entity extraction.

**Design**:
- Sophisticated multi-lingual processing using:
  - Embeddings (Transformers)
  - Named Entity Recognition (spaCy)
  - Fuzzy matching for entity resolution
  - Regular expressions for pattern matching

**Configuration**:
- Intent definitions in `configs/models.json`
- Entity type definitions (built-in and custom)

**Current Status**: Defined but inactive.

**Dependencies**:
- Knowledge Base for entity resolution
- Session Manager for context tracking
- Configured intent and entity models

## Dialog Manager

**Location**: `src/dialog/manager.py`

**Purpose**: Manage conversation flow, state transitions, and response generation.

**Design**:
- Stateful dialogue management based on defined flows
- Handles context tracking and state transitions
- Manages prompt generation for responses

**Configuration**:
- Dialog flows defined in `configs/dialog_flows.json`
- Response templates in `configs/response_templates/`

**Current Status**: Defined but inactive.

**Dependencies**:
- NLU Engine for intent and entity processing
- Knowledge Base for contextual information
- Session Manager for state tracking
- Response Generator for output formatting

## Knowledge Base

**Location**: `src/knowledge/knowledge_base.py`

**Purpose**: Provide access to structured tourism data and information retrieval.

**Design**:
- Interface to SQLite database via DatabaseManager
- Structured query capabilities by topic, subtopic, and entity
- Support for multilingual content (EN/AR)

**Data Sources**:
- SQLite database (defined in `init_db.py`)
- JSON files in `data/` directory
- Vector embeddings (planned)

**Current Status**: Critical disconnection. Class is a placeholder without implementation.

**Dependencies**:
- DatabaseManager for SQLite access
- Vector DB for embedding search (planned)
- JSON files in data/ directory as fallback

## Response Generator

**Location**: `src/response/generator.py`

**Purpose**: Format and generate appropriate responses based on dialog state and retrieved information.

**Design**:
- Template-based response generation
- Dynamic content insertion from KB
- Multilingual support (EN/AR)
- Natural language variation

**Configuration**:
- Response templates in `configs/response_templates/`
- Language-specific formatting rules

**Current Status**: Defined but inactive.

**Dependencies**:
- Dialog Manager for state and context
- Knowledge Base for information retrieval
- Session Manager for user context

## Service Hub

**Location**: `src/integration/service_hub.py`

**Purpose**: Centralize and abstract external service integrations.

**Design**:
- Plugin architecture for services
- Unified interface for service calls
- Error handling and fallbacks
- Caching capabilities

**Integrated Services**:
- LLM Service (Anthropic)
- Weather Service
- Translation Service

**Current Status**: Defined but inactive. Active path makes direct API calls instead.

**Dependencies**:
- External API credentials from configuration
- Service-specific implementations
- Redis for caching (optional)

## Session Manager

**Location**: `src/utils/session.py`

**Purpose**: Manage user sessions, conversation history, and state.

**Design**:
- Configurable backend (Redis/File)
- Session expiration handling
- Conversation context tracking
- Entity and state persistence

**Current Status**: Defined but partially used. Active path likely uses simple file-based sessions.

**Dependencies**:
- Redis for primary storage (configured but not used)
- File system for fallback storage
- JWT for token validation (related to auth)

## Database Manager

**Location**: `src/utils/database.py`

**Purpose**: Provide unified database access interface.

**Design**:
- SQLAlchemy-based ORM interface
- Connection pooling
- Transaction management
- Query builders

**Current Status**: Defined but potentially unused. DB schema exists but connection to KB is missing.

**Dependencies**:
- SQLAlchemy library
- SQLite database (defined, PostgreSQL planned)
- Database schema (defined in `init_db.py`)

## RAG Pipeline

**Location**: `src/knowledge/rag_pipeline.py`

**Purpose**: Implement Retrieval-Augmented Generation for improved responses.

**Design**:
- Query enhancement
- Hybrid retrieval (vector + keyword)
- Context preparation for LLM
- Result ranking and fusion

**Current Status**: Defined but inactive. Depends on functioning KB and vector DB.

**Dependencies**:
- Knowledge Base for information retrieval
- Vector DB for embedding search
- LLM Service for generation
- Embedding models for query/document encoding
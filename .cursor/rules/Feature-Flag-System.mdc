---
description: 
globs: 
alwaysApply: true
---
# Feature Flag System

## Overview

The Feature Flag System enables a safe, gradual transition between the legacy architecture (`app.py`) and the target architecture (`src/` path). This system allows individual components to be activated independently, providing fine-grained control over the refactoring process.

## Core Feature Flags

### 1. `USE_NEW_KB`

**Description**: Controls whether to use the new Knowledge Base implementation

**Default**: `false`

**Implementation Path**:
- `true`: Use `src/knowledge/knowledge_base.py` with database connection
- `false`: Use hardcoded dictionary from `app.py`

**Dependencies**:
- Requires functional DatabaseManager if enabled
- Requires JSON fallback capability for safety

### 2. `USE_NEW_API`

**Description**: Controls routing between Flask (`app.py`) and FastAPI (`src/main.py`)

**Default**: `false`

**Implementation Path**:
- `true`: Route traffic through FastAPI application
- `false`: Use existing Flask application

**Dependencies**:
- Requires proper CORS configuration in FastAPI
- Requires handling of existing session data

### 3. `USE_NEW_NLU`

**Description**: Controls whether to use the advanced NLU engine

**Default**: `false`

**Implementation Path**:
- `true`: Use sophisticated NLU with intent recognition and entity extraction
- `false`: Use simple keyword matching

**Dependencies**:
- Requires functioning Knowledge Base for entity resolution
- Requires proper model loading

### 4. `USE_NEW_DIALOG`

**Description**: Controls whether to use the stateful Dialog Manager

**Default**: `false`

**Implementation Path**:
- `true`: Use stateful dialog management with state tracking
- `false`: Use stateless processing

**Dependencies**:
- Requires functioning NLU Engine
- Requires Session Manager for state persistence

### 5. `USE_POSTGRES`

**Description**: Controls database backend selection

**Default**: `false`

**Implementation Path**:
- `true`: Use PostgreSQL database
- `false`: Use SQLite database

**Dependencies**:
- Requires completed database migration
- Requires proper connection configuration

### 6. `USE_REDIS`

**Description**: Controls session storage mechanism

**Default**: `false`

**Implementation Path**:
- `true`: Store sessions in Redis
- `false`: Store sessions in files

**Dependencies**:
- Requires Redis server availability
- Requires session data migration

### 7. `USE_RAG`

**Description**: Controls whether to use the RAG pipeline

**Default**: `false`

**Implementation Path**:
- `true`: Use RAG pipeline for retrieval and context generation
- `false`: Use direct knowledge lookup

**Dependencies**:
- Requires functional Knowledge Base
- Requires vector embeddings

### 8. `USE_SERVICE_HUB`

**Description**: Controls whether to use the Service Hub for external integrations

**Default**: `false`

**Implementation Path**:
- `true`: Route service calls through ServiceHub
- `false`: Make direct API calls

**Dependencies**:
- Requires service implementations
- Requires proper credentials configuration

## Transition Strategy

For safe transition between components:

1. Start with all flags set to `false`
2. Enable `USE_NEW_KB` first as the most critical component
3. Enable `USE_POSTGRES` once data migration is complete
4. Enable `USE_REDIS` after session migration
5. Enable `USE_NEW_NLU` and `USE_NEW_DIALOG` after KB is stable
6. Enable `USE_RAG` after vector embeddings are generated
7. Enable `USE_SERVICE_HUB` after service integrations are tested
8. Finally enable `USE_NEW_API` to complete the transition
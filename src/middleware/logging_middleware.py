"""
Structured Logging Middleware for FastAPI

This middleware provides structured logging for all requests and responses,
enhancing observability by capturing key metrics and contextual information.
"""
import logging
import time
from typing import Callable, Dict, Any, Optional

from fastapi import FastAPI, Request, Response
from starlette.middleware.base import BaseHTTPMiddleware, RequestResponseEndpoint
from starlette.types import ASGIApp

from src.middleware.request_id import get_request_id

# Set up logging
logger = logging.getLogger(__name__)


class LoggingMiddleware(BaseHTTPMiddleware):
    """
    Middleware for structured logging of requests and responses.
    
    Logs the start and completion of requests with timing information, request ID,
    method, path, status code, and other relevant details.
    """
    
    def __init__(self, app: ASGIApp, log_request_body: bool = False, log_response_body: bool = False):
        """
        Initialize the logging middleware.
        
        Args:
            app: The ASGI application
            log_request_body: Whether to log the request body (default: False)
            log_response_body: Whether to log the response body (default: False)
        """
        super().__init__(app)
        self.log_request_body = log_request_body
        self.log_response_body = log_response_body
    
    async def dispatch(
        self, request: Request, call_next: RequestResponseEndpoint
    ) -> Response:
        """
        Process the request, log details, and measure performance.
        
        Args:
            request: The incoming request
            call_next: The next middleware or endpoint handler
            
        Returns:
            Response: The response from the next handler
        """
        # Get request ID (will be generated by RequestIDMiddleware if not present)
        request_id = get_request_id(request)
        
        # Start time for performance measurement
        start_time = time.time()
        
        # Create a log context with request information
        log_context = {
            "request_id": request_id,
            "method": request.method,
            "path": request.url.path,
            "query_params": str(request.query_params),
            "client_host": request.client.host if request.client else None,
            "user_agent": request.headers.get("user-agent"),
        }
        
        # Log request start
        logger.info(f"Request started: {request.method} {request.url.path}", extra=log_context)
        
        # Log request body if enabled
        if self.log_request_body:
            try:
                # Read request body
                body = await request.body()
                if body:
                    log_context["request_body"] = body.decode("utf-8")
            except Exception as e:
                logger.warning(f"Failed to log request body: {str(e)}", extra=log_context)
        
        # Process the request and catch any exceptions
        try:
            response = await call_next(request)
            status_code = response.status_code
        except Exception as exc:
            # Log exceptions
            logger.exception(
                f"Unhandled exception during request processing: {str(exc)}",
                extra=log_context
            )
            raise
        
        # Calculate the request duration
        duration = time.time() - start_time
        
        # Update log context with response information
        log_context.update({
            "status_code": status_code,
            "duration_ms": round(duration * 1000, 2)
        })
        
        # Determine log level based on status code
        if status_code >= 500:
            log_level = logging.ERROR
        elif status_code >= 400:
            log_level = logging.WARNING
        else:
            log_level = logging.INFO
        
        # Log response body if enabled
        if self.log_response_body and hasattr(response, "body"):
            try:
                log_context["response_body"] = response.body.decode("utf-8")
            except Exception as e:
                logger.warning(f"Failed to log response body: {str(e)}", extra=log_context)
        
        # Log request completion
        logger.log(
            log_level,
            f"Request completed: {request.method} {request.url.path} - {status_code} in {log_context['duration_ms']}ms",
            extra=log_context
        )
        
        return response


def add_logging_middleware(
    app: FastAPI,
    log_request_body: bool = False,
    log_response_body: bool = False
) -> None:
    """
    Add the logging middleware to a FastAPI application.
    
    Args:
        app: FastAPI application instance
        log_request_body: Whether to log request bodies (default: False)
        log_response_body: Whether to log response bodies (default: False)
    """
    app.add_middleware(
        LoggingMiddleware,
        log_request_body=log_request_body,
        log_response_body=log_response_body
    ) 